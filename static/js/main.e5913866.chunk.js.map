{"version":3,"sources":["Video1.js","Video2.js","App.js","serviceWorker.js","index.js"],"names":["Video1","state","playing","mediaStart","hoverOn","url","_this","setState","MouseOver","document","getElementById","className","hoverOff","setTimeout","onPause","console","log","onStart","this","react_default","a","createElement","id","ReactPlayer_default","onMouseEnter","onMouseLeave","Component","Video2","App","src_Video1","src_Video2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAsEeA,6MAjEbC,MAAQ,CACNC,SAAS,EACTC,YAAY,KAKdC,QAAU,SAAAC,GACRC,EAAKC,SAAS,CAAEL,SAAS,EACvBM,WAAW,IAGfC,SAASC,eAAe,UAAUC,UAAY,gBAI9CC,SAAW,SAAAP,GACTC,EAAKC,SAAS,CAACC,WAAU,KACK,IAA1BF,EAAKL,MAAME,WACdU,WAAWP,EAAKM,SAAS,KAI1BN,EAAKC,SAAS,CAAEL,SAAS,IACzBO,SAASC,eAAe,UAAUC,UAAY,oBAKhDG,QAAU,YACoB,IAAzBR,EAAKL,MAAMO,WAClBO,QAAQC,IAAI,cAGRV,EAAKC,SAAS,CAAEL,SAAS,OAK3Be,QAAU,WAERX,EAAKC,SAAS,CAAEJ,YAAY,6EAKrB,IACCD,EAAYgB,KAAKjB,MAAjBC,QACR,OACEiB,EAAAC,EAAAC,cAAA,OAAKV,UAAU,mBACbQ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAASX,UAAU,iBACzBQ,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEf,IAAI,8BACJH,QAASA,EACTY,QAASI,KAAKJ,QACdU,aAAcN,KAAKd,QACnBqB,aAAcP,KAAKN,SACnBK,QAASC,KAAKD,mBA1DLS,aCkENC,6MAjEb1B,MAAQ,CACNC,SAAS,EACTC,YAAY,KAKdC,QAAU,SAAAC,GACRC,EAAKC,SAAS,CAAEL,SAAS,EACvBM,WAAW,IAGfC,SAASC,eAAe,UAAUC,UAAY,gBAI9CC,SAAW,SAAAP,GACTC,EAAKC,SAAS,CAACC,WAAU,KACK,IAA1BF,EAAKL,MAAME,WACdU,WAAWP,EAAKM,SAAS,KAI1BN,EAAKC,SAAS,CAAEL,SAAS,IACzBO,SAASC,eAAe,UAAUC,UAAY,oBAKhDG,QAAU,YACoB,IAAzBR,EAAKL,MAAMO,WAClBO,QAAQC,IAAI,cAGRV,EAAKC,SAAS,CAAEL,SAAS,OAK3Be,QAAU,WAERX,EAAKC,SAAS,CAAEJ,YAAY,6EAKrB,IACCD,EAAYgB,KAAKjB,MAAjBC,QACR,OACEiB,EAAAC,EAAAC,cAAA,OAAKV,UAAU,mBACbQ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAASX,UAAU,iBACzBQ,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEf,IAAI,8BACJH,QAASA,EACTY,QAASI,KAAKJ,QACdU,aAAcN,KAAKd,QACnBqB,aAAcP,KAAKN,SACnBK,QAASC,KAAKD,mBA1DLS,aCyBNE,mLAdX,OACJT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAD,MAEAV,EAAAC,EAAAC,cAACS,EAAD,cAXkBJ,aCIEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAS7B,SAASC,eAAe,SD2H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e5913866.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ReactPlayer from \"react-player\";\n\nclass Video1 extends Component {\n  state = {\n    playing: false,\n    mediaStart: false\n    \n  };\n\n\n  hoverOn = url => {\n    this.setState({ playing: true ,\n      MouseOver: true\n    })\n  \n  document.getElementById(\"video1\").className = \"mouseHover\";\n  }\n  \n  \n  hoverOff = url => {\n    this.setState({MouseOver:false})\n    if (this.state.mediaStart === false ) {\n     setTimeout(this.hoverOff,50)\n    }\n  \n  else{\n    this.setState({ playing: false })\n    document.getElementById(\"video1\").className = \"mouseNotHover\"\n  }\n  }\n\n\n  onPause = () => {\n    if(this.state.MouseOver === true) {\nconsole.log(\"ouvir page\")\n\n    }\n    this.setState({ playing: false })\n\n  }\n\n\n  onStart = () => {\n\n    this.setState({ mediaStart: true })\n\n\n\n  }\n  render() {\n    const { playing } = this.state;\n    return (\n      <div className=\"colorBackground\">\n        <div id=\"video1\" className=\"mouseNotHover\">\n          <ReactPlayer\n            url=\"https://vimeo.com/311770698\"\n            playing={playing}\n            onPause={this.onPause}\n            onMouseEnter={this.hoverOn}\n            onMouseLeave={this.hoverOff}\n            onStart={this.onStart}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Video1;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ReactPlayer from \"react-player\";\n\nclass Video2 extends Component {\n  state = {\n    playing: false,\n    mediaStart: false\n    \n  };\n\n\n  hoverOn = url => {\n    this.setState({ playing: true ,\n      MouseOver: true\n    })\n  \n  document.getElementById(\"video2\").className = \"mouseHover\";\n  }\n  \n  \n  hoverOff = url => {\n    this.setState({MouseOver:false})\n    if (this.state.mediaStart === false ) {\n     setTimeout(this.hoverOff,50)\n    }\n  \n  else{\n    this.setState({ playing: false })\n    document.getElementById(\"video2\").className = \"mouseNotHover\"\n  }\n  }\n\n\n  onPause = () => {\n    if(this.state.MouseOver === true) {\nconsole.log(\"ouvir page\")\n\n    }\n    this.setState({ playing: false })\n\n  }\n\n\n  onStart = () => {\n\n    this.setState({ mediaStart: true })\n\n\n\n  }\n  render() {\n    const { playing } = this.state;\n    return (\n      <div className=\"colorBackground\">\n        <div id=\"video2\" className=\"mouseNotHover\">\n          <ReactPlayer\n            url=\"https://vimeo.com/311770698\"\n            playing={playing}\n            onPause={this.onPause}\n            onMouseEnter={this.hoverOn}\n            onMouseLeave={this.hoverOff}\n            onStart={this.onStart}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Video2;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Video1 from './Video1.js'\nimport Video2 from './Video2.js'\n\n\n\n\nclass App extends Component {\n\n\n\n\n  render() {\n\n    return (\n<div>\n<Video1/>\n\n<Video2/>\n\n</div>\n    \n\n        \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}